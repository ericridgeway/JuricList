# TODO /s list

todo_list_test.exs
  # - addEntry and update_entry/2 take %TodoEntry instead of any map (pg 119)

  # - diff syntax page 119 in the middle
  # test "update_entry/2", ~M{todo_list} do
  #   new_entry = Map.put(todo_list.entries, 2,
  #   todo_list =
  #     todo_list
  #     |> TodoList.update_entry(Map.put(, :date, @date_updated))

  #   assert TodoList.titles(todo_list, @date2) == []
  #   assert TodoList.titles(todo_list, @date_updated) == ["Shopping"]
  # end

#
# @grp questions
#

todo_server_test.exs
    # The answer might be obvious once you give it, but... I've forgotten why we smetimes
    #   want to do this. add OOP/genserver concept. We don't have to do
    #   todo_list2 = TodoList.do_something(todo_list1, ...)
    #   etc. a bunch of times. But pipelines/the entire point of elixir/functional
    #   goes a long way to minimize that being much (if any) of an annoyance
    #
    #   so what are the situations where we want to use this again? Only when we need
    #   to start thinking about 2+ clients calling it at once or something? And even then,
    #   why couldn't we just hold the passed-back 'new_todo_list' each time or something?

    TodoServer.add_entry(todo_server, %{date: @date1, title: "Dentist"})
    TodoServer.add_entry(todo_server, %{date: @date2, title: "Shopping"})
    TodoServer.add_entry(todo_server, %{date: @date1, title: "Movies"})



